{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearhBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","title","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCAbC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACCD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCPZM,G,MAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACpB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAcA,EACdG,SAAUF,MCmDCG,G,wDAnDb,aAAc,IAAD,8BACX,gBAoBHH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SApBpC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAY,IAJH,E,qDAcd,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBASzC,WAEE,MAAsCC,KAAKN,MAApCb,EAAP,EAAOA,SAAUU,EAAjB,EAAiBA,YAIXU,GAJN,EAA8BC,MAILrB,EAASsB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASd,EAAYa,mBAIlD,OACE,sBAAK/B,UAAU,MAAf,UACE,kEAEA,cAAC,EAAD,CACEW,YAAY,iBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA9CVK,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCEdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.37e45e96.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\n\r\nimport {Card} from '../card/card.component';\r\n\r\nimport './card-list.style.css';\r\n\r\n// export functional component\r\nexport const CardList = props => (\r\n    <div className='card-list'>\r\n    {props.monsters.map(monster => (\r\n      <Card key={monster.id} monster={monster}/>\r\n    ))} \r\n    </div>\r\n);\r\n\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearhBox = ({placeholder, handleChange}) => (\r\n    <input \r\n    className='search'\r\n    type='search' \r\n    placeholder= {placeholder}\r\n    onChange={handleChange}\r\n    />\r\n)","import React, {Component} from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\n\nimport { SearhBox } from './components/search-box/search-box.component';\n\nimport './App.css';\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField:''\n      // title: ''\n    };\n\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  // Using componentDidMount() to fetch data from the URL, \n  // then convert it to json format so JavaScript can understand and use\n  // then assign users list to the monsters array\n componentDidMount(){ \n   fetch('https://jsonplaceholder.typicode.com/users')\n   .then(response => response.json())\n   .then(users => this.setState({monsters: users}));\n\n }\n\n handleChange = e => {\n   this.setState({searchField: e.target.value});\n  //  this.setState({searchField: e.target.value, title: e.target.value});\n }\n\n  render(){\n    // const {monsters, searchField}= this.state;\n    const {monsters, searchField, title}= this.state;\n    // The above Destructuring equivalent to the following:\n    // const monsters = this.state.monsters;\n    // const searchField = this.state.searchField;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex - By Nam Nguyen</h1>\n        {/* <h1>{title}</h1> */}\n        <SearhBox \n          placeholder='search monster'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}/>     \n        {/* <CardList monsters={monsters}/>       */}\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; //import from App.js\nimport reportWebVitals from './reportWebVitals';\n\n// ReactDom library calls render to render our App function in the form of HTML\n// document.getElementById('root'): looking on the document object for some elements with \n// an id of root & it replaces it with that HTML from our \"App\" function\nReactDOM.render( \n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n); \n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}